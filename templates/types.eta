import * as P from 'parse';
<% Object.entries(it.services).forEach(([serviceName, service]) => { %>
  <% if (!service.config) { return; } %>
  <%~ it.helpers.createImportFromFilename(service.config, `${serviceName}_`) %>
<% }) %>

type ParseType = typeof P;

/* === GENERAL TYPES === */
export interface ParseObjectReference {
  id: string;
  className: string;
}

type ACLSchema = {
  [key: string]: {
    read?: boolean;
    write?: boolean;
  };
};

export type BaseServiceConfig = {
  aclSchema?: ACLSchema;
  [key: string]: any;
};

export type ServiceInitializer<T extends BaseServiceConfig = BaseServiceConfig> = (
  Parse: ParseType,
  config?: T
) => any;

/* === TRIGGER TYPES === */
export enum ActionTriggerCondition {
  Exists = "exists",
  DoesNotExist = "does not exist",
  Equals = "equals",
  Contains = "contains",
  StartsWith = "startsWith",
  EndsWith = "endsWith",
  LessThan = "lessThan",
  LessThanOrEqualTo = "lessThanOrEqualTo",
  GreaterThan = "greaterThan",
  GreaterThanOrEqualTo = "greaterThanOrEqualTo",
  Unique = "unique",
  NotUnique = "not unique",
}

export interface ActionTriggerAttributes {
  id: string;
  objectClass: string;
  objectId: string;
  createdAt: Date;
  updatedAt: Date;
  name?: string;
  type?: string;
  condition: string;
  property?: string;
  value?: string | number | string[] | number[] | object;
  active?: boolean;
  trigger: string;
  handler: string;
  payload: object;
}

export type ActionTrigger = Parse.Object<ActionTriggerAttributes>;

export type TriggerCloudRequest = {
  triggerId: string;
  object: ParseObjectReference;
};

export type TriggerCloudRequestHandler = (params: TriggerCloudRequest) => any;

export type TriggerPayloadOption = {
  label: string;
  value: string;
};

export type TriggerPayloadParams = {
  type: string;
  label: string;
  helpText?: string;
  targetClass?: string;
  required?: boolean;
  defaultValue?: any;
  options?: TriggerPayloadOption[];
};

export type TriggerPayloadSchema = { [key: string]: TriggerPayloadParams };
export type TriggerPayload = {
  [prop in keyof TriggerPayloadSchema]?: any;
};

export type TriggerHandlerRequest =
  | Parse.Cloud.BeforeSaveRequest
  | Parse.Cloud.AfterSaveRequest
  | Parse.Cloud.BeforeDeleteRequest
  | Parse.Cloud.AfterDeleteRequest;

export type TriggerHandler<C extends BaseServiceConfig> = (
  request: TriggerHandlerRequest,
  trigger: ActionTrigger,
  Parse: ParseType,
  config?: C
) => any;

export type TriggerHandlerRegistry<C extends BaseServiceConfig> = {
  [key: string]: TriggerHandler<C>;
};

export type TriggerValidationResult = { [key: string]: string };

/* === HOOK TYPES === */
export type BeforeSaveHandler<T extends Parse.Object, C extends BaseServiceConfig> = (
  request: Parse.Cloud.BeforeSaveRequest<T>,
  Parse: ParseType,
  config?: C
) => Promise<any>;

export type BeforeCreateHandler<T extends Parse.Object, C extends BaseServiceConfig> = BeforeSaveHandler<T, C>;
export type BeforeUpdateHandler<T extends Parse.Object, C extends BaseServiceConfig> = BeforeSaveHandler<T, C>;

export type AfterSaveHandler<T extends Parse.Object, C extends BaseServiceConfig> = (
  request: Parse.Cloud.AfterSaveRequest<T>,
  Parse: ParseType,
  config?: C
) => Promise<any>;

export type AfterCreateHandler<T extends Parse.Object, C extends BaseServiceConfig> = AfterSaveHandler<T, C>;
export type AfterUpdateHandler<T extends Parse.Object, C extends BaseServiceConfig> = AfterSaveHandler<T, C>;

export type BeforeDeleteHandler<T extends Parse.Object, C extends BaseServiceConfig> = (
  request: Parse.Cloud.BeforeDeleteRequest<T>,
  Parse: ParseType,
  config?: C
) => Promise<any>;

export type AfterDeleteHandler<T extends Parse.Object, C extends BaseServiceConfig> = (
  request: Parse.Cloud.AfterDeleteRequest<T>,
  Parse: ParseType,
  config?: C
) => Promise<any>;


/* === CONFIG TYPES === */
export interface ParseFunctionConfig {
  <% Object.entries(it.services).forEach(([serviceName, service]) => { %>
    <%~ serviceName %>?: Partial<typeof <%~ it.helpers.getSanitizedFunctionName(service.config, `${serviceName}_`) %>>;
  <% }) %>
}

interface ParseFunctionServiceSchema {
  className: string;
  fields: {
    [key: string]: ParseFunctionServiceSchemaField;
  };
  [key: string]: any;
}

type ParseFunctionServiceSchemaField = {
  type: string;
  targetClass?: string;
  required?: boolean;
  defaultValue?: any;
}

export type SchemaMap = {
  [prop in ClassNames]: ParseFunctionServiceSchema
}

export type TriggerHandlerOption = {
  label: string;
  value: string;
  parameters: { [key: string]: TriggerPayloadParams };
}

export type TriggerHandlersMap = {
  [prop in ClassNames]: TriggerHandlerOption[];
}


/* === CONSTANTS === */
export const Schemas: SchemaMap = {
  <% Object.values(it.services).forEach(service => { %>
    <%~ service.className %>: <%~ JSON.stringify(service.schema, null, 2) %>,
  <% }) %>
};

export enum ClassNames {
  <% Object.values(it.services).map(service => service.className).forEach(className => { %>
    <%~ className %> = '<%~ className %>',
  <% }) %>
}

export const ClassNamesList = Object.values(ClassNames);

export const TriggerHandlers: TriggerHandlersMap = {
  <% Object.values(it.services).forEach(service => { %>
    <%~ service.className %>: [
      <% service.triggers.forEach((trigger) => { %>
        {
          label: '<%~ it.helpers.getSanitizedFunctionName(trigger) %>',
          value: '<%~ it.helpers.getSanitizedFunctionName(trigger) %>',
          parameters: require('<%~ trigger %>')?.payloadSchema || {},
        },
      <% }) %>
    ],
  <% }) %>
};
