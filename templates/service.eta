
// auto-generated file for actions
import P from 'parse';
import { ActionTrigger, processActionTriggers, ServiceInitializer } from './helpers';
<% if (it.service.config) { %>
  import defaultServiceConfig, { ServiceConfig } from '<%~ it.service.config.replace(/\.ts$/, '') %>';
<% } %>

<% Object.entries(it.service.hooks).forEach(([hookName, hooks]) => { %>
  <% if (hooks.config) { %>
    <%~ it.helpers.createImportFromFilename(hooks.config, `hook_${hookName}_`) %>
  <% } %>

  <% hooks.hooks.forEach((hookPath) => { %>
    <%~ it.helpers.createImportFromFilename(hookPath, `hook_${hookName}_`) %>
  <% }) %>
<% }) %>

<% it.service.triggers.forEach((triggerPath) => { %>
  <%~ it.helpers.createImportFromFilename(triggerPath, 'trigger_') %>
<% }) %>

<% it.service.functions.forEach((functionPath) => { %>
  <%~ it.helpers.createImportFromFilename(functionPath) %>
<% }) %>

<% it.service.jobs.forEach((jobPath) => { %>
  <%~ it.helpers.createImportFromFilename(jobPath, 'job_') %>
<% }) %>


/* === TYPES === */
type ParseType = typeof P;

export interface <%~ it.service.className %>Attributes {
  <% Object.entries(it.service.schema.fields).forEach(([fieldName, field]) => { %>
    <%~ fieldName %><% if (!field.required) { %>?<% } %>: <%~ it.helpers.mapSchemaTypeToTSType(field) %>,
  <% }) %>
}

export type <%~ it.service.className %> = P.Object<<%~ it.service.className %>Attributes>;

<% if (it.service.config) { %>
  export { ServiceConfig };
<% } %>


/* === CONSTANTS === */
const defaultFunctionConfig = {
  requireUser: true,
  requireAnyUserRoles: ['editor'],
};

const defaultJobConfig = {
  requireUser: true,
  requireAnyUserRoles: ['editor'],
  requireMaster: true,
};

const defaultTriggerConfig = {
  requireUser: true,
  requireAnyUserRoles: ['editor'],
  requireMaster: true,
};


/* === SERVICE === */
const service: <% if (it.service.config) { %> ServiceInitializer<ServiceConfig> <% } else { %> ServiceInitializer <% } %> =
  (Parse: ParseType, config = <% if (it.service.config) { %> defaultServiceConfig <% } else { %> {} <% } %>) => {
  const configWithDefaults = <% if (it.service.config) { %> Object.assign({}, defaultServiceConfig, config) <% } else { %> config <% } %>;

  // HOOKS
  <% Object.entries(it.helpers.SubhooksMap).forEach(([hookName, subhooks]) => { %>
    <% const hooks = it.service.hooks[hookName] %>
    <% if (hooks && hooks.hooks.length > 0) { %>
      Parse.Cloud.<%~ hookName %><<%~ it.service.className %>>('<%~ it.service.className %>', async (request) => {
        <% hooks.hooks.forEach((hookPath) => { %>
          await <%~ it.helpers.getSanitizedFunctionName(hookPath, `hook_${hookName}_`) %>(request);
        <% }) %>

        <% for (const subhookName of subhooks) { %>
          <% const subhook = it.service.hooks[subhookName] %>
          <% if (subhook && subhook.hooks.length) { %>
            Parse.Cloud.run('<%~ it.service.className%>_<%~ subhookName %>', request);
          <% } %>
        <% } %>

        await processActionTriggers<<%~ it.service.className %>>({
          object: request.object,
          triggerName: '<%~ hookName %>',
        });
      }<% if (hooks.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hooks.config, `hook_${hookName}_`) %><% } %>);
    <% } %>
    
  <% }) %>

  // ADDITIONAL HOOKS
  <% if (it.service.hooks[it.helpers.AdditionalHookNames.beforeCreate].hooks.length) { %>
    <% const hookName = it.helpers.AdditionalHookNames.beforeCreate; %>
    <% const hook = it.service.hooks[it.helpers.AdditionalHookNames.beforeCreate]; %>
    Parse.Cloud.define<(params: <%~ it.service.className %>) => Promise<any>>(
      '<%~ it.service.className %>_<%~ hookName %>',
      async (request) => {
        const object = request.params;
        if (!object.isNew()) return;
        <% if (hook && hook.hooks.length > 0) { %>
          <% for (h of hook.hooks) { %>
            await <%~ it.helpers.getSanitizedFunctionName(h, `hook_${hookName}_`) %>(request);
          <% } %>
        <% } %>
      },
      <% if (hook.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hook.config, `hook_${hookName}_`) %><% } %>
    );
  <% } %>
  
  <% if (it.service.hooks[it.helpers.AdditionalHookNames.afterCreate].hooks.length) { %>
    <% const hookName = it.helpers.AdditionalHookNames.afterCreate; %>
    <% const hook = it.service.hooks[it.helpers.AdditionalHookNames.afterCreate]; %>
    Parse.Cloud.define<(params: <%~ it.service.className %>) => Promise<any>>(
      '<%~ it.service.className %>_<%~ hookName %>',
      async (request) => {
        const object = request.params;
        if (!object.isNew()) return;
        <% if (hook && hook.hooks.length > 0) { %>
          <% for (h of hook.hooks) { %>
            await <%~ it.helpers.getSanitizedFunctionName(h, `hook_${hookName}_`) %>(request);
          <% } %>
        <% } %>
      },
      <% if (hook.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hook.config, `hook_${hookName}_`) %><% } %>
    );
  <% } %>
  
  <% if (it.service.hooks[it.helpers.AdditionalHookNames.beforeUpdate].hooks.length) { %>
    <% const hookName = it.helpers.AdditionalHookNames.beforeUpdate; %>
    <% const hook = it.service.hooks[it.helpers.AdditionalHookNames.beforeUpdate]; %>
    Parse.Cloud.define<(params: <%~ it.service.className %>) => Promise<any>>(
      '<%~ it.service.className %>_<%~ hookName %>',
      async (request) => {
        const object = request.params;
        if (object.isNew()) return;
        <% if (hook && hook.hooks.length > 0) { %>
          <% for (h of hook.hooks) { %>
            await <%~ it.helpers.getSanitizedFunctionName(h, `hook_${hookName}_`) %>(request);
          <% } %>
        <% } %>
      },
      <% if (hook.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hook.config, `hook_${hookName}_`) %><% } %>
    );
  <% } %>
  
  <% if (it.service.hooks[it.helpers.AdditionalHookNames.afterUpdate].hooks.length) { %>
    <% const hookName = it.helpers.AdditionalHookNames.afterUpdate; %>
    <% const hook = it.service.hooks[it.helpers.AdditionalHookNames.afterUpdate]; %>
    Parse.Cloud.define<(params: <%~ it.service.className %>) => Promise<any>>(
      '<%~ it.service.className %>_<%~ hookName %>',
      async (request) => {
        const object = request.params;
        if (object.isNew()) return;
        <% if (hook && hook.hooks.length > 0) { %>
          <% for (h of hook.hooks) { %>
            await <%~ it.helpers.getSanitizedFunctionName(h, `hook_${hookName}_`) %>(request);
          <% } %>
        <% } %>
      },
      <% if (hook.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hook.config, `hook_${hookName}_`) %><% } %>
    );
  <% } %>
  
  // CRON HOOKS
  <% Object.values(it.helpers.CronHookNames).forEach((hookName) => { %>
    <% const hook = it.service.hooks[hookName]; %>
    <% if (hook && hook.hooks.length) { %>
      Parse.Cloud.job(
        '<%~ it.service.className %>_<%~ hookName %>',
        async (request) => {
          const object = request.params;
          <% if (hook && hook.hooks.length > 0) { %>
            <% for (h of hook.hooks) { %>
              await <%~ it.helpers.getSanitizedFunctionName(h, `hook_${hookName}_`) %>(request);
            <% } %>
          <% } %>
        },
        <% if (hook.config) { %>, <%~ it.helpers.getSanitizedFunctionName(hook.config, `hook_${hookName}_`) %><% } %>
      );
    <% } %>
  <% }) %>

  // FUNCTIONS
  <% it.service.functions.forEach((functionPath) => { %>
    Parse.Cloud.define(
      '<%~ it.helpers.getSanitizedFunctionName(functionPath) %>',
      <%~ it.helpers.getSanitizedFunctionName(functionPath) %>,
      require('<%~ functionPath %>')?.config || defaultFunctionConfig
    );
  <% }) %>
  
  // JOBS
  <% it.service.jobs.forEach((jobPath) => { %>
    Parse.Cloud.job(
      '<%~ it.helpers.getSanitizedFunctionName(jobPath) %>',
      <%~ it.helpers.getSanitizedFunctionName(jobPath, 'job_') %>
    );
  <% }) %>
  
  // TRIGGER HANDLERS
  <% it.service.triggers.forEach((triggerPath) => { %>
    Parse.Cloud.define(
      '<%~ it.helpers.getSanitizedFunctionName(triggerPath) %>',
      <%~ it.helpers.getSanitizedFunctionName(triggerPath, 'trigger_') %>,
      require('<%~ triggerPath %>')?.config || defaultTriggerConfig
    );
  <% }) %>
};

export default service;
