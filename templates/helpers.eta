import * as P from "parse";
import crypto from 'crypto';
import {
  ActionTriggerCondition,
  BaseServiceConfig,
  TriggerHandlerRegistry,
  TriggerHandlerRequest,
  ActionTrigger,
  TriggerPayloadSchema,
  TriggerPayload,
  TriggerValidationResult
} from './types';

type ParseType = typeof P;

let Parse = P;

export const registerParseInstance = (p: ParseType) => {
  Parse = p;
};

/* === HELPERS === */
export const createHash = (obj: object): string => {
  return crypto.createHash('md5').update(JSON.stringify(obj)).digest('hex');
};

export const createStringHash = (str: string): string => {
  return crypto.createHash('md5').update(str).digest('hex');
};

export async function processActionTriggers<C extends BaseServiceConfig>(
  registry: TriggerHandlerRegistry<C>,
  triggerType: string,
  request: TriggerHandlerRequest,
  Parse: ParseType,
  config?: C
) {
  const { object } = request;
  const actionTriggerQuery = new Parse.Query<ActionTrigger>("ActionTrigger")
    .equalTo("active", true)
    .equalTo("objectClass", object.className)
    .equalTo("trigger", triggerType);
  const triggers = await actionTriggerQuery.findAll({ useMasterKey: true });

  for (const trigger of triggers) {
    const conditionMessage = await testTriggerCondition(trigger, object);

    if (conditionMessage != null) {
      // get action items associated with this trigger (if available),
      // and resolve them when the trigger condition no longer matches.
      const actionItemQuery = new Parse.Query('ActionItem')
        .equalTo('trigger', trigger)
        .equalTo('subjectClass', object.className)
        .equalTo('subjectId', object.id);
      try {
        const actionItems = await actionItemQuery.find({ useMasterKey: true });
        for (const actionItem of actionItems) {
          actionItem.set('resolved', true);
          actionItem.set('resolvedAt', new Date());
          await actionItem.save(null, { useMasterKey: true });
        }
      } catch (err) {
        // nothing
      }
      continue;
    }

    const handlerName = trigger.get("handler");
    const handler = registry[handlerName];
    if (handler == null) continue;

    await handler(request, trigger, Parse, config);
  }
}

export const TriggerConditionMessages = {
  [ActionTriggerCondition.Contains]: `Property '{{prop}} does not contain value '{{val}}`,
  [ActionTriggerCondition.DoesNotExist]: `Property '{{prop}} exists (and should not)`,
  [ActionTriggerCondition.EndsWith]: `Property '{{prop}}' does not end with value '{{val}}'`,
  [ActionTriggerCondition.Equals]: `Property '{{prop}} does not equal value '{{val}}'`,
  [ActionTriggerCondition.Exists]: `Property '{{prop}}' does not exist`,
  [ActionTriggerCondition.GreaterThan]: `Property '{{prop}}' is not greater than value '{{val}}'`,
  [ActionTriggerCondition.GreaterThanOrEqualTo]: `Property '{{prop}}' is not greater than or equal to value '{{val}}'`,
  [ActionTriggerCondition.LessThan]: `Property '{{prop}}' is not less that {{val}}`,
  [ActionTriggerCondition.LessThanOrEqualTo]: `Property '{{prop}}' is not less than or equal to value '{{val}}'`,
  [ActionTriggerCondition.NotUnique]: `Property '{{prop}}' is unique (and should not be), with value '{{val}}'`,
  [ActionTriggerCondition.StartsWith]: `Property '{{prop}}' does not start with value '{{val}}'`,
  [ActionTriggerCondition.Unique]: `Property '{{prop}}' is not unique, with value '{{val}}'`,
};

function interpolateTriggerConditionMessage(message: ActionTriggerCondition, prop: string, val?: any) {
  const m = TriggerConditionMessages[message];
  return val
    ? m
        .replace(new RegExp(`{{\s*prop\s*}}`, "gi"), prop)
        .replace(new RegExp(`{{\s*val\s*}}`, "gi"), val.toString())
    : m.replace(new RegExp(`{{\s*prop\s*}}`, "gi"), prop);
}

export async function testTriggerCondition<T extends Parse.Object = Parse.Object>(
  trigger: ActionTrigger,
  obj: T
): Promise<string | undefined> {
  const condition = trigger.get("condition") as ActionTriggerCondition | undefined;
  const property = trigger.get("property");
  const value = trigger.get("value");
  if (condition == null || property == null) return;

  const propertyValue = obj.get(property);
  const n1 = Number(propertyValue);
  const n2 = Number(value);
  const q = new Parse.Query(obj.className).equalTo(property, propertyValue);
  const message = interpolateTriggerConditionMessage(condition, property, value);

  switch (condition) {
    case ActionTriggerCondition.Exists:
      return propertyValue != null ? undefined : message;
    case ActionTriggerCondition.DoesNotExist:
      return propertyValue == null ? undefined : message;
    case ActionTriggerCondition.Contains:
      return !!propertyValue?.includes(value) ? undefined : message;
    case ActionTriggerCondition.Equals:
      return value === propertyValue ? undefined : message;
    case ActionTriggerCondition.StartsWith:
      return propertyValue?.indexOf(value) === 0 ? undefined : message;
    case ActionTriggerCondition.EndsWith:
      const endsWith =
        propertyValue && value
          ? propertyValue.indexOf(value) === propertyValue.length - value.toString().length
          : false;
      return endsWith ? undefined : message;
    case ActionTriggerCondition.LessThan:
      const isLessThan = !isNaN(n1) && !isNaN(n2) ? n1 < n2 : false;
      return isLessThan ? undefined : message;
    case ActionTriggerCondition.LessThanOrEqualTo:
      const isLessThanOrEqualTo = !isNaN(n1) && !isNaN(n2) ? n1 <= n2 : false;
      return isLessThanOrEqualTo ? undefined : message;
    case ActionTriggerCondition.GreaterThan:
      const isGreaterThan = !isNaN(n1) && !isNaN(n2) ? n1 > n2 : false;
      return isGreaterThan ? undefined : message;
    case ActionTriggerCondition.GreaterThanOrEqualTo:
      const isGreaterThanOrEqualTo = !isNaN(n1) && !isNaN(n2) ? n1 >= n2 : false;
      return isGreaterThanOrEqualTo ? undefined : message;
    case ActionTriggerCondition.Unique:
      const res1 = await q.findAll({ useMasterKey: true });
      return res1.length === 0 ? undefined : message;
    case ActionTriggerCondition.NotUnique:
      const res2 = await q.findAll({ useMasterKey: true });
      return res2.length > 0 ? undefined : message;
  }
}

export async function validateTriggerPayload(
  schema: TriggerPayloadSchema,
  payload: TriggerPayload
): Promise<TriggerValidationResult> {
  const errors: TriggerValidationResult = {};
  for (const schemaKey in schema) {
    const fieldSchema = schema[schemaKey];
    const val = payload[schemaKey];
    if (fieldSchema.required && (val == null || val == "")) {
      errors[schemaKey] = "This field is required";
    } else {
      switch (fieldSchema.type) {
        case "Relation":
        case "Pointer":
          const q = new Parse.Query(fieldSchema.targetClass!);
          const r = await q.get(val);
          if (r == null) {
            errors[schemaKey] = "This field is required";
          }
          break;
        case "String":
          if (typeof val !== "string") {
            errors[schemaKey] = "Please enter a string";
          }
          break;
        case "Number":
          if (isNaN(Number(val))) {
            errors[schemaKey] = "Please enter a number";
          }
          break;
        case "Date":
          if (isNaN(+new Date(val))) {
            errors[schemaKey] = "Please enter a valid date";
          }
          break;
      }
    }
  }
  return errors;
}
